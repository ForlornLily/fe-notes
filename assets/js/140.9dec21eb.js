(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{627:function(t,v,_){"use strict";_.r(v);var r=_(14),a=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"概要"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[t._v("#")]),t._v(" 概要")]),t._v(" "),v("p",[t._v("参考")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.ituring.com.cn/book/1632",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 设计模式与开发实践"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.patterns.dev/posts/introduction",target:"_blank",rel:"noopener noreferrer"}},[t._v("Introduction to Design Patterns"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"鸭子类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#鸭子类型"}},[t._v("#")]),t._v(" 鸭子类型")]),t._v(" "),v("p",[t._v("duck typing ：“当看到一只鸟走起来像鸭子，游泳起来也像鸭子，叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”"),v("br"),t._v("\n鸭子类型指导我们只关注对象的行为，不关注对象本身。"),v("br"),t._v("\n比如一个对象如果有 "),v("code",[t._v("push")]),t._v(" 和 "),v("code",[t._v("pop")]),t._v(" 方法，就可以当做栈来使用。")]),t._v(" "),v("h2",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),v("p",[t._v("polymorphipsm ：为不同的数据类型提供统一的接口。"),v("br"),t._v("\n本质思想是将“做什么”和“由谁做以及怎么做”拆开。"),v("br"),t._v("\n比如魔法少女会和吉祥物签订契约，从者会和御主签订契约。"),v("br"),t._v("\n把「签订契约」这个动作拆出来，会产生不同的结果")]),t._v(" "),v("h2",{attrs:{id:"封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),v("p",[t._v("封装可以是隐藏数据，也可以是隐藏实现的细节、隐藏对象的类型"),v("br"),t._v(" "),v("s",[t._v("比如魔法少女变身的过程")])]),t._v(" "),v("h2",{attrs:{id:"设计模式概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式概览"}},[t._v("#")]),t._v(" 设计模式概览")]),t._v(" "),v("ul",[v("li",[t._v("单例模式")]),t._v(" "),v("li",[t._v("策略模式")]),t._v(" "),v("li",[t._v("代理模式")]),t._v(" "),v("li",[t._v("迭代器模式")]),t._v(" "),v("li",[t._v("发布-订阅模式")]),t._v(" "),v("li",[t._v("命令模式")]),t._v(" "),v("li",[t._v("组合模式")]),t._v(" "),v("li",[t._v("模板方法模式")]),t._v(" "),v("li",[t._v("享元模式")]),t._v(" "),v("li",[t._v("职责链模式")]),t._v(" "),v("li",[t._v("中介者模式")]),t._v(" "),v("li",[t._v("装饰器模式")]),t._v(" "),v("li",[t._v("状态模式")]),t._v(" "),v("li",[t._v("适配器模式")])]),t._v(" "),v("h2",{attrs:{id:"设计原则概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计原则概览"}},[t._v("#")]),t._v(" 设计原则概览")]),t._v(" "),v("ul",[v("li",[t._v("单一职责原则")]),t._v(" "),v("li",[t._v("最少知识原则")]),t._v(" "),v("li",[t._v("开放-封闭原则")])])])}),[],!1,null,null,null);v.default=a.exports}}]);